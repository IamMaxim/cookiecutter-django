version: '3'

volumes:
  develop_postgres_data: {}
  develop_postgres_data_backups: {}
  develop_traefik: {}
  {%- if cookiecutter.cloud_provider == 'None' %}
  develop_django_media: {}
  {%- endif %}

services:
  django:{% if cookiecutter.use_celery == 'y' %} &django{% endif %}
    build:
      context: .
      dockerfile: ./compose/develop/django/Dockerfile
      {%- if cookiecutter.frontend_pipeline == 'Webpack' and cookiecutter.use_whitenoise == 'n' %}
      args:
        # These variable can be defined in an .env file in the root of the repo
        {%- if cookiecutter.cloud_provider == 'AWS' %}
        DJANGO_AWS_STORAGE_BUCKET_NAME: ${DJANGO_AWS_STORAGE_BUCKET_NAME}
        DJANGO_AWS_S3_CUSTOM_DOMAIN: ${DJANGO_AWS_S3_CUSTOM_DOMAIN}
        {%- elif cookiecutter.cloud_provider == 'GCP' %}
        DJANGO_GCP_STORAGE_BUCKET_NAME: ${DJANGO_GCP_STORAGE_BUCKET_NAME}
        {%- elif cookiecutter.cloud_provider == 'Azure' %}
        DJANGO_AZURE_ACCOUNT_NAME: ${DJANGO_AZURE_ACCOUNT_NAME}
        {%- endif %}
      {%- endif %}

    image: $CI_REGISTRY_IMAGE/django:$CI_COMMIT_SHA
    {%- if cookiecutter.cloud_provider == 'None' %}
    volumes:
      - develop_django_media:/app/{{ cookiecutter.project_slug }}/media
    {%- endif %}
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.develop/.django
      - ./.envs/.develop/.postgres
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/develop/postgres/Dockerfile
    image: $CI_REGISTRY_IMAGE/postgres:$CI_COMMIT_SHA
    volumes:
      - develop_postgres_data:/var/lib/postgresql/data
      - develop_postgres_data_backups:/backups
    env_file:
      - ./.envs/.develop/.postgres

  traefik-dev:
    build:
      context: .
      dockerfile: ./compose/develop/traefik/Dockerfile
    image: $CI_REGISTRY_IMAGE/traefik:$CI_COMMIT_SHA
    depends_on:
      - django
    volumes:
      - develop_traefik:/etc/traefik/acme
    expose:
      - 80
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-dev.rule=Host(`dev.{{ cookiecutter.domain_name }}`)
      - traefik.http.middlewares.csrf.headers.hostsProxyHeaders=X-CSRFToken

  redis:
    image: redis:6
  {%- if cookiecutter.use_celery == 'y' %}

  celeryworker:
    <<: *django
    image: $CI_REGISTRY_IMAGE/celeryworker:$CI_COMMIT_SHA
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: $CI_REGISTRY_IMAGE/celerybeat:$CI_COMMIT_SHA
    command: /start-celerybeat

  flower:
    <<: *django
    image: $CI_REGISTRY_IMAGE/flower:$CI_COMMIT_SHA
    command: /start-flower
  {%- endif %}
  {%- if cookiecutter.cloud_provider == 'AWS' %}

  awscli:
    build:
      context: .
      dockerfile: ./compose/develop/aws/Dockerfile
    env_file:
      - ./.envs/.develop/.django
    volumes:
      - develop_postgres_data_backups:/backups:z
  {%- endif %}
  {%- if cookiecutter.cloud_provider == 'None' %}

  nginx:
    build:
      context: .
      dockerfile: ./compose/develop/nginx/Dockerfile
    image: $CI_REGISTRY_IMAGE/nginx:$CI_COMMIT_SHA
    depends_on:
      - django
    volumes:
      - develop_django_media:/usr/share/nginx/media:ro
  {%- endif %}
