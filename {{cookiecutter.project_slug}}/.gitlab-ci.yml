stages:
  - lint
  - test
  - build
  - deploy

variables:
  POSTGRES_USER: '{{ cookiecutter.project_slug }}'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_{{ cookiecutter.project_slug }}'
  POSTGRES_HOST_AUTH_METHOD: trust
  {%- if cookiecutter.use_celery == 'y' %}
  CELERY_BROKER_URL: 'redis://redis:6379/0'
  {%- endif %}
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_DEPTH: 1
  # Force rewrite SSH to HTTPS for submodules,
  # since no SSH keys are present in CI job.
  GIT_SUBMODULE_FORCE_HTTPS: "true"

precommit:
  stage: lint
  image: python:3.11
  tags:
    - docker
  variables:
    PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  cache:
    paths:
      - ${PRE_COMMIT_HOME}
  before_script:
    - pip install -q pre-commit
  script:
    - pre-commit run --show-diff-on-failure --color=always --all-files

pytest:
  stage: test
  {%- if cookiecutter.use_docker == 'y' %}
  image: docker/compose:1.29.2
  tags:
    - docker
  services:
    - docker:dind
  before_script:
    - docker-compose -f local.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f local.yml run --rm django python manage.py migrate
    - docker-compose -f local.yml up -d
  script:
    - docker-compose -f local.yml run django pytest
  {%- else %}
  image: python:3.11
  tags:
    - python
  services:
    - postgres:{{ cookiecutter.postgresql_version }}
  variables:
    DATABASE_URL: pgsql://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres/$POSTGRES_DB
  before_script:
    - pip install -r requirements/local.txt
  script:
    - pytest
  {%- endif %}

{%- if cookiecutter.use_docker == 'y' %}
build and push prod:
  stage: push
  image: atnartur/docker:latest
  tags:
    - docker
  only:
    - master
  script:
    # Setup prod env file
    - bash setup_prod_env_files.sh
    # Build and push images
    - docker-compose -f production.yml build
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose -f production.yml push
{%- endif %}

{%- if cookiecutter.use_docker == 'y' %}
deploy prod:
  stage: deploy
  image: atnartur/docker:latest
  tags:
    - docker-compose
    - prod
  only:
    - master
  script:
    # Setup prod env file
    - bash setup_prod_env_files.sh
    # Deploy
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose -f production.yml pull
    - docker-compose -f production.yml up -d
{%- endif %}
